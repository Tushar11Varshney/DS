//133
public Node clone_helper(Node node,HashMap<Integer,Node>map)
{
    if(map.containsKey(node.val))
        return map.get(node.val);
    
    Node clone_node=new Node(node.val);
    map.put(node.val,clone_node);
    for(Node vtx:node.neighbors)
        clone_node.neighbors.add(clone_helper(vtx,map));
    return clone_node;
}

public Node cloneGraph(Node node) {
    if(node==null)return node;
    HashMap<Integer,Node>map=new HashMap<>();
    return clone_helper(node,map);
}

//https://practice.geeksforgeeks.org/problems/m-coloring-problem-1587115620/1#
public boolean isSafetoColor(boolean graph[][],int color,int vtx,int []visited)
{
    for(int i=0;i<graph[vtx].length;i++)
    {
        //if edge exist and nbr with same color return false
        if(vtx!=i && graph[vtx][i] && visited[i]==color)
        return false;
    }
    return true;
}

public boolean graphColor_helper(int []visited,boolean graph[][],int m,int n,int count,int color)
{
    if(count==n-1)  //last node pr color krpaaye successfully
        return true;
    
    visited[count]=color;
    for(int j=0;j<m;j++)  //m-1 isliye ni bcz disconnected graph mein vo same hi color dubara use hoskta hai
    {
        color=(color+1)%m;
        if(isSafetoColor(graph,color,count+1,visited))
        {
            if(graphColor_helper(visited,graph,m,n,count+1,color))return true;
        }
    }
    visited[count]=-1;
    return false;
}

public boolean graphColoring(boolean graph[][], int m, int n) {
    int []visited=new int[n];
    Arrays.fill(visited,-1);
    boolean res=graphColor_helper(visited,graph,m,n,0,0);
    return res;
}

int shortestPath_helper(vector<vector<int>>& graph)
{
    int n=graph.size();
    int all=(1<<n)-1;
    queue<pair<int,pair<int,int>>>que; //{node,bitmask,dist}
    set<pair<int,int>>s;
    for(int i=0;i<n;i++)
    {
        int bit=(1<<i);
        que.push({i,{bit,0}});
        s.insert({i,bit});
    }
    
    while(que.size()!=0)
    {
        auto mp=que.front();
        que.pop();
        int node=mp.first,nodebitmask=mp.second.first,d=mp.second.second;
        for(int i=0;i<graph[node].size();i++)
        {
            int temp=(nodebitmask|(1<<graph[node][i]));
            if(temp==all)return d+1;
            else if(s.find({graph[node][i],temp})!=s.end())
                continue;
            s.insert({graph[node][i],temp});
            que.push({graph[node][i],{temp,d+1}});
        }
    }
    
    return 0;
}

int shortestPathLength(vector<vector<int>>& graph) {
    if(graph.size()==0)return 0;
    return shortestPath_helper(graph);
}

//https://practice.geeksforgeeks.org/problems/euler-circuit-and-path/1/
public void dfs( ArrayList<ArrayList<Integer>> adj,boolean[] visited,int src)
{
    visited[src]=true;
    for(int ele:adj.get(src))
    {
        if(!visited[ele])
        dfs(adj,visited,ele);
    }
}

boolean isConected(ArrayList<ArrayList<Integer>> adj,int V)
{
    int node=-1;
    for(int i=0;i<V;i++)
    {
        if(adj.get(i).size()>0)
        {
            node=i; //got a node to start dfs
            break;
        }
    }
    
    boolean []visited=new boolean[V];
    if(node==-1)return true;  //every node 0 degree so eulerian graph/ckt
    dfs(adj,visited,node);
    for(int i=0;i<V;i++)
    {
        if(!visited[i] && adj.get(i).size()>0) //node was not visited and has edges
            return false;
    }
    
    return true;
}


public int isEularCircuitExist(int V, ArrayList<ArrayList<Integer>> adj)
{
    if(!isConected(adj,V))
        return 0;
        
    int count=0;
    for(int i=0;i<V;i++)
    {
        if(adj.get(i).size()%2!=0)
        count++;
    }
    
    if(count==0)return 2;  //eulerian graph/ckt
    else if(count==2)return 1;  //eulerian path
    
    return 0; //neither ec or ep
}

========================
//120
public int minimumTotal_helper(List<List<Integer>> triangle,int [][]dp,int idx,int r,int n)
{
    if(r==n-1)
        return triangle.get(r).get(idx);
    
    if(dp[r][idx]!=(int)-1e5)
        return dp[r][idx];
    
    dp[r][idx]=Math.min(minimumTotal_helper(triangle,dp,idx,r+1,n),minimumTotal_helper(triangle,dp,idx+1,r+1,n))+triangle.get(r).get(idx);
    
    return dp[r][idx];
}

public int minimumTotal(List<List<Integer>> triangle) {
        int n=triangle.size();
        int [][]dp=new int[n][n];
        for(int []a:dp)
            Arrays.fill(a,(int)-1e5);
        return minimumTotal_helper(triangle,dp,0,0,n);
}

//1706
vector<int> findBall(vector<vector<int>>& grid) {
    int n=grid.size(),m=grid[0].size();
    vector<int>ans(m);
    for(int i=0;i<m;i++)  //colm 
    {
        int cpos=i,npos=-1;
        for(int j=0;j<n;j++) //row
        {
            npos=cpos+grid[j][cpos];
            
            if(npos<0 || npos>=m || grid[j][cpos]!=grid[j][npos])
            {
                cpos=-1;
                break;
            }
            
            cpos=npos;
        }
        ans[i]=cpos;
    }
    return ans;
}

//bellmanford algo
//if negative cycle exist then dont give answer because updation hoti hai and they are wrong answer ...if cycle not exist then answer dedo.
public static void bellmannFord(int [][]graph,int src,int N)
{
    int []dis=new int[N];
    Arrays.fill(dis, (int)1e9);

    dis[src]=0;
    boolean isNegativeCyclePresent=false;
    for(int edgeCount=1;edgeCount<=N;edgeCount++)
    {
        int []ndis=new int[N];
        for(int i=0;i<N;i++)
        ndis[i]=dis[i];

        for(int []edge:graph)
        {
            int u=edge[0],v=edge[1],w=edge[2];
            if(dis[u]!=(int)1e9 && dis[u]+w<ndis[v])
            {
                if(edgeCount==N)
                {
                    isNegativeCyclePresent=true;
                    break;
                }
                ndis[v]=dis[u]+w;
            }
        }
        dis=ndis;
    }
}

public int findCheapestPrice2(int N, int[][] flights, int src, int dst, int K) {
    int []dis=new int[N];
    Arrays.fill(dis, (int)1e9);

    dis[src]=0;
    for(int edgeCount=1;edgeCount<=K+1;edgeCount++)
    {
        int []ndis=new int[N];
        for(int i=0;i<N;i++)
        ndis[i]=dis[i];

        for(int []edge:flights)
        {
            int u=edge[0],v=edge[1],w=edge[2];
            if(dis[u]!=(int)1e9 && dis[u]+w<ndis[v])   
                ndis[v]=dis[u]+w;
        }
        dis=ndis;
    }
    return dis[dst]!=(int)1e9?dis[dst]:-1;
}

//630
public int scheduleCourse(int[][] courses) {
        
        Arrays.sort(courses,(int []a,int []b)->{
            return a[1]-b[1];
        });
        
        PriorityQueue<Integer>pq=new PriorityQueue(Collections.reverseOrder());
        int n=courses.length;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            if(courses[i][0]<=courses[i][1])
            {
                sum+=courses[i][0];
                if(sum>courses[i][1] && courses[i][0]<pq.peek())  //remove course which has highest time
                {
                    sum-=pq.poll();
                    pq.add(courses[i][0]);
                }
                else if(sum>courses[i][1]) sum-=courses[i][0]; //cant do this course
                else pq.add(courses[i][0]);  //course included
            }
        }
        return pq.size();
    }

public List<Integer> powerfulIntegers(int x, int y, int bound) {
    HashSet<Integer>hs=new HashSet<>();
    for(int i=1;i<bound;i*=x)  //x^0 x^1 x^2
    {
        for(int j=1;i+j<=bound;j*=y)
        {
            hs.add(i+j);
            if(y==1)break;
        }
        if(x==1)break;
    }

    return new ArrayList<>(hs);
}

//=============
public static boolean BinaryStringRepresentin1toN(String s, int n) {
    
    HashMap<Integer,Boolean>map=new HashMap<>();
    int count=0;
    for(int i=0;i<s.length();i++)
    {
        if(s.charAt(i)==0)
            continue;
        
        for(int j=i,num=0;num<=n && j<s.length();j++)
        {
            num =(num<<1)+s.charAt(j)-'0';
            if(num>=1 && num<=n && map.getOrDefault(num,false)==false)
            {
                map.put(num,true);
                count++;
            }
            
            if(count==n)
                return true;
        }
    }
    
    return false;
}

//187
public List<String> findRepeatedDnaSequences(String s) {
        List<String>ans=new ArrayList<>();
        if(s.length()<=10)return ans;
        
        int ei=10;
        StringBuilder sb=new StringBuilder(s.substring(0,10));
        
        HashSet<String>present_once=new HashSet<>();
        HashSet<String>present_twice=new HashSet<>();
        
        present_once.add(sb.toString());
        while(ei<s.length())
        {
            sb.append(s.charAt(ei));
            ei++;
            sb.deleteCharAt(0);
            if(present_once.contains(sb.toString()))
                present_twice.add(sb.toString());
            else present_once.add(sb.toString());
        }
        
        for(String str:present_twice)
            ans.add(str);
        return ans;
    }

//992
 public int subarraysWithKDistinct_helper(int []nums,int k)
    {
        int count=0,si=0,ei=0,distinct_count=0;
        HashMap<Integer,Integer>map=new HashMap<>();
        while(ei<nums.length)
        {
            if(map.containsKey(nums[ei]))
                map.put(nums[ei],map.get(nums[ei])+1);
            else{
                map.put(nums[ei],1);
                distinct_count++;
            }
            ei++;
            
            while(distinct_count>k)
            {
                if(map.get(nums[si])==1)
                {
                    map.remove(nums[si]);
                    distinct_count--;
                }
                else{
                    map.put(nums[si],map.get(nums[si])-1);
                }
                si++;
            }
            
            count+=ei-si;
        }
        return count;
    }
    
    public int subarraysWithKDistinct(int[] nums, int k) {
        return  subarraysWithKDistinct_helper(nums,k)-(k!=0?subarraysWithKDistinct_helper(nums,k-1):0);
    }

// 2nd method
public List<Integer> lexicalOrder(int n) {
    List<Integer> ans = new ArrayList<>();
    int curr = 1;
    for (int i = 1; i <= n; i++) {
        ans.add(curr);
        if (curr * 10 <= n)
            curr = curr * 10;
        else if (curr % 10 != 9 && curr + 1 <= n) {
            curr = curr + 1;
        } else {
            while ((curr / 10) % 10 == 9)
                curr = curr / 10;
            curr = curr / 10 + 1;
        }
    }
    return ans;
}

queen chooses 2d as 2d,box chooses 2d as 2d
Queen permutation queen chooses2d as 2d,box chooses

public static void queensCombinations(int qpsf, int tq, boolean[][] chess, int i, int j) { // queen chooses as 2d
    if (qpsf == tq) {
        for (int row = 0; row < chess.length; row++) {
            for (int col = 0; col < chess[0].length; col++) {
                if (chess[row][col] == true)
                    System.out.print("q\t");
                else
                    System.out.print("-\t");
            }
            System.out.println();
        }
        System.out.println();
        return;
    }

    for (int col = j + 1; col < chess[0].length; col++) {
        chess[i][col] = true;
        queensCombinations(qpsf + 1, tq, chess, i, col);
        chess[i][col] = false;
    }

    for (int row = i + 1; row < chess.length; row++) {
        for (int col = 0; col < chess[0].length; col++) {
            chess[row][col] = true;
            queensCombinations(qpsf + 1, tq, chess, row, col);
            chess[row][col] = false;
        }
    }
}

public static void queensCombinations(int qpsf, int tq, int row, int col, String asf) { // box chooses 2d as 2d
    if (row == tq) {
        if (qpsf == tq) {
            System.out.println(asf);
        }
        return;
    }

    String yansf = "";
    String nansf = "";
    if (col == tq - 1) {
        row = row + 1;
        col = 0;
        yansf = asf + "q" + "\n";
        nansf = asf + "-" + "\n";
    } else {
        col = col + 1;
        yansf = asf + "q";
        nansf = asf + "-";
    }

    queensCombinations(qpsf + 1, tq, row, col, yansf);
    queensCombinations(qpsf, tq, row, col, nansf);
}

public static void queensPermutations(int qpsf, int tq, int[][] board) { // queen chooses 2d as 2d
    if (qpsf == tq) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] != 0)
                    System.out.print("q" + board[i][j] + "\t");
                else
                    System.out.print("-\t");
            }
            System.out.println();
        }
        System.out.println();
        return;
    }

    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
            if (board[i][j] == 0) {
                board[i][j] = (qpsf + 1);
                queensPermutations(qpsf + 1, tq, board);
                board[i][j] = 0;
            }
        }
    }
}

public static void queensPermutations(int qpsf, int tq, int row, int col, String asf, boolean[] queens) { // box chooses as 2d
    if (row == tq) {
        if (qpsf == tq) {
            System.out.println(asf);
            System.out.println();
        }
        return;
    }

    String sep = "";
    if (col == tq - 1) {
        row = row + 1;
        col = 0;
        sep = "\n";
    } else {
        col = col + 1;
        sep = "\t";
    }

    for (int i = 0; i < queens.length; i++) {
        if (queens[i] == false) {
            queens[i] = true;
            queensPermutations(qpsf + 1, tq, row, col, asf + "q" + (i + 1) + sep, queens);
            queens[i] = false;
        }
    }

    queensPermutations(qpsf, tq, row, col, asf + "-" + sep, queens);
}

public static void subArray() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int arr[] = new int[n];
    for (int i = 0; i < n; i++) {
        arr[i] = sc.nextInt();
    }

    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            for (int k = i; k <= j; k++) {
                System.out.printf("%d\t", arr[k]);
            }
            System.out.println("");
        }
    }
}

public static void subSet() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int arr[] = new int[n];
    for (int i = 0; i < n; i++)
        arr[i] = sc.nextInt();

    int totalSubset = (int) Math.pow(2, n);

    for (int i = 0; i < totalSubset; i++) {
        int temp = i;
        String res = "";
        for (int j = arr.length - 1; j >= 0; j--) {
            int rem = temp % 2;
            temp = temp / 2;

            if (rem == 0) {
                res = "-\t" + res;
            } else {
                res = arr[j] + "\t" + res; // question mein bola h har character ke baad space..
            }
        }
        System.out.println(res);
    }
}

public static int LinearSearch() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int arr[] = new int[n];
    for (int i = 0; i < n; i++)
        arr[i] = sc.nextInt();
    int ele = sc.nextInt(); // agar print krana ho tou idx=-1 then break and print outside loop(no need to take flag and then check outside loop if flag has changed or not to find
    //value hume mili h loop ke andar ya ni.)
    for (int i = 0; i < n; i++) {
        if (ele == arr[i])
            return i;
    }
    return -1;
}

public static void ceilfloor() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int arr[] = new int[n];
    for (int i = 0; i < n; i++)
        arr[i] = sc.nextInt();
    int target = sc.nextInt();
    int si = 0, ei = n - 1;
    while (si <= ei) {
        int mid = (si + ei) / 2;
        if (arr[mid] == target) {
            System.out.println(target);
            return;
        } else if (arr[mid] < target) {
            si = mid + 1;
        } else
            ei = mid - 1;
    }
    System.out.println(arr[si]);
    System.out.println(arr[ei]);
}

public static void firstLastIndex() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int nums[] = new int[n];
    for (int i = 0; i < n; i++)
        nums[i] = sc.nextInt();
    int target = sc.nextInt();

    int mid = 0, si = 0, ei = n - 1, idx1 = -1, idx2 = -1, midCopy = mid, flag = 0;
    while (si <= ei) {
        mid = (si + ei) / 2;
        if (nums[mid] == target) {
            idx1 = idx2 = midCopy = mid;
            while (--mid >= 0 && nums[mid] == target)
                idx1 = mid;
            while (++midCopy < n && nums[midCopy] == target)
                idx2 = midCopy;
            System.out.println(idx1);
            System.out.println(idx2);
            flag = 1;
            break;
        } else if (nums[mid] > target) {
            ei = mid - 1;
        } else {
            si = mid + 1;
        }
    }
    if (flag == 0) {
        System.out.println(-1);
        System.out.println(-1);
    }
}

public static void sum2Array() {
    Scanner sc = new Scanner(System.in);
    int m = sc.nextInt(), arr1[] = new int[m];
    for (int i = 0; i < m; i++)
        arr1[i] = sc.nextInt();
    int n = sc.nextInt(), arr2[] = new int[n];
    for (int i = 0; i < n; i++)
        arr2[i] = sc.nextInt();
    int sum[] = new int[m > n ? m : n];
    int i = m - 1;
    int j = n - 1;
    int k = sum.length - 1, carry = 0, digit = 0;
    while (k >= 0) {
        digit = carry;

        if (i >= 0) // i,j,k place value hai
            digit += arr1[i--];

        if (j >= 0)
            digit += arr2[j--];

        carry = digit / 10;
        digit = digit % 10;

        sum[k--] = digit;
    }
    if (carry != 0)
        System.out.println(carry);
    for (int idx = 0; idx < sum.length; idx++)
        System.out.println(sum[idx]);
}

public static void sub2Array() {
    Scanner sc = new Scanner(System.in);
    int m = sc.nextInt(), arr1[] = new int[m];
    for (int i = 0; i < m; i++)
        arr1[i] = sc.nextInt();
    int n = sc.nextInt(), arr2[] = new int[n];
    for (int i = 0; i < n; i++)
        arr2[i] = sc.nextInt();
    int diff[] = new int[n]; // given in ques arr2 is big than arr1
    int i = m - 1;
    int j = n - 1;
    int k = n - 1, carry = 0, digit = 0;

    while (k >= 0) {
        digit = 0;
        int val = i >= 0 ? arr1[i] : 0;
        if (arr2[j] + carry - val >= 0) {
            digit = arr2[j] + carry - val;
            carry = 0;
        } else {
            digit = arr2[j] + carry + 10 - val;
            carry = -1;
        }
        diff[k] = digit;
        j--;
        i--;
        k--;
    }

    int idx = 0;
    for (idx = 0; idx < diff.length; idx++) {
        if (diff[idx] != 0)
            break;
    }
    while (idx < diff.length)
        System.out.println(diff[idx++]);
}

public static int[] inverse(int[] a) {
    int n = a.length;
    int res[] = new int[n];
    for (int i = n - 1; i >= 0; i--) {
        int index = a[i];
        res[index] = i;
    }
    return res;
}

public static void removePrimeFromList(ArrayList<Integer> al) {
    for (int i = al.size() - 1; i >= 0; i--) {
        int val = al.get(i), flag = 0;
        for (int j = 2; j * j <= val; j++) {
            if (val % j == 0) {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
            al.remove(i);
    }
}

public static int spanofArray() {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int arr[] = new int[n];
    for (int i = 0; i < n; i++)
        arr[i] = sc.nextInt();
    int max = arr[0], min = arr[0];
    for (int i = 1; i < arr.length; i++) {
        if (arr[i] > max)
            max = arr[i];
        else if (arr[i] < min)
            min = arr[i];
    }
    return max - min;
}


//120
int solve(int i, int j, int n, vector<vector<int>>&triangle, vector<vector<int>>&dp) {
    if(i == n - 1)
        return triangle[i][j];
    if(dp[i][j] != -1)
        return dp[i][j];
    int bottom = triangle[i][j] + solve(i+1, j, n, triangle, dp);
    int  bottom_right = triangle[i][j] + solve(i+1, j+1, n, triangle, dp);
    return dp[i][j] = min(bottom, bottom_right);
}
int minimumTotal(vector<vector<int>>& triangle) {
    int n = triangle.size();
    vector<vector<int>>dp(n, vector<int>(n, -1));
    return solve(0, 0, n, triangle, dp);
}

//120
int minimumTotal(vector<vector<int>>& triangle) {    
    int ans=1e9;
    for(int i=1;i<triangle.size();i++)
    {
        for(int j=0;j<triangle[i].size();j++)
        {
            int prevSize=triangle[i-1].size();
            if(!(j-1>=0 && j-1<=prevSize-1))
            triangle[i][j]+=triangle[i-1][j];
            else if(!(j>=0 && j<=prevSize-1))
            triangle[i][j]+=triangle[i-1][j-1];
            else{
                triangle[i][j]+=min(triangle[i-1][j],triangle[i-1][j-1]);
            }
        }
    }

    for(int ele:triangle[triangle.size()-1])
        ans=min(ans,ele);
            
    return ans;
}

//304
int [][]mat;
int [][]sum;
public NumMatrix(int[][] matrix) {
    mat=matrix;
    int n=matrix.length,m=matrix[0].length;
    sum=new int[n+1][m+1];
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            //sum[i][j] contain sum from [0,0,i,j]
            sum[i][j]=sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1]+matrix[i-1][j-1]; 
        }
    }
}

public int sumRegion(int row1, int col1, int row2, int col2) {
    row1++;col1++;row2++;col2++;
    return sum[row2][col2]-sum[row2][col1-1]-sum[row1-1][col2]+sum[row1-1][col1-1];
}


//918
public int maxSubarraySumCircular(int[] nums) {
    int n=nums.length,gsum1=-(int)1e9,rsum1=-(int)1e9,gsum2=-(int)1e9,rsum2=-(int)1e9,sum=0;
    
    for(int i=0;i<nums.length;i++)
    {
        sum+=nums[i];
        
        rsum1=Math.max(nums[i],rsum1+nums[i]);
        gsum1=Math.max(gsum1,rsum1);
        
        int val=-nums[i];
        rsum2=Math.max(val,rsum2+val);
        gsum2=Math.max(gsum2,rsum2);
    }
    
    if(gsum1<0)return gsum1;  //[-3,-2,-3]
    return Math.max(gsum1,sum+gsum2);
} 

static class pair implements Comparable<pair> {
    int val;
    int index;

    pair(int val, int index) {
        this.val = val;
        this.index = index;
    }

    public int compareTo(pair o) {
        return o.val - this.val;
    }
}

public int[] maxSlidingWindow(int[] arr, int k) {
    int[] ans = new int[arr.length - k + 1];
    PriorityQueue<pair> pq = new PriorityQueue<>();
    int i = 0, j = 0;
    while (i != k) {
        pq.add(new pair(arr[i], i));
        i++;
    }
    ans[j++] = pq.peek().val;

    int minRange = 1;
    for (; i < arr.length; i++) {
        pq.add(new pair(arr[i], i));
        while (!(pq.peek().index >= minRange && pq.peek().index < k + minRange))
            pq.poll();
        ans[j++] = pq.peek().val;
        minRange++;
    }

    return ans;
}

public static int[] ngeOnRightMaxSliding(int[] arr) {
    int n = arr.length;
    int[] nge = new int[n];
    nge[n - 1] = arr.length;

    Stack<Integer> st = new Stack<>();
    st.push(n - 1);
    for (int i = n - 2; i >= 0; i--) {
        while (st.size() > 0 && arr[i] >= arr[st.peek()])
            st.pop();
        if (st.size() != 0)
            nge[i] = st.peek();
        else
            nge[i] = arr.length;

        st.push(i);
    }
    return nge;
}

public static int[] maxSlidingWindow2(int[] arr, int k) {
    int ans[] = new int[arr.length - k + 1];
    int[] nge = ngeOnRightMaxSliding(arr);

    int j = 0, l = 0;
    for (int i = 0; i <= arr.length - k; i++) {
        if (j < i)
            j = i;

        while (nge[j] < i + k)
            j = nge[j];

        ans[l++] = arr[j];
    }

    for (int ele : ans)
        System.out.println(ele);
    return ans;
}

public static void arrayList() {
    //set,remove,get,size,add 
    // int arr[]=new int[5]; //fixed size
    // ArrayList<Integer>list=new ArrayList<>();
    // System.out.println(list+" "+list.size());
    // list.add(10);
    // list.add(20);
    // list.add(30);
    // list.add(2,300); //indexing-012.. [10,20,300,30]
    // System.out.println(list+" "+list.size()); [10, 20, 300, 30] 4 //to print list can use for loop or forEach loop.

    // System.out.println(list.get(2)); //not list[2]
    // list.set(2, 90); //not list[2]=90
    // list.remove(0);
    // System.out.println(list);

    // ArrayList<String> list1 = new ArrayList<>();
    // list1.add("hello");
    // list1.add(1, "bello");
    // list1.add("mello");
    // list1.remove(0);
    // list1.set(1, "mayank");
    // System.out.println(list1);
}

